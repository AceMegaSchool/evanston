@page "/"
@using Evanston.Component
@using OneOf
@using OneOf.Types
@inject Directory Directory
@inject Mappers Mappers

<PageTitle>Black Businesses | Ace Mega School of Evanston</PageTitle>

<style>
    .no-borders > td, .no-borders > tr > th {
        border: none;
    }
</style>

<Centered>
    <MudChipSet T="BusinessCategory" @bind-SelectedValues="_selectedCategories" SelectionMode="SelectionMode.MultiSelection" CheckMark="true">
        @foreach (var category in Categories)
        {
            <MudChip Value="@category.Category" Text="@(category.Description)" Color="Color.Primary" SelectedColor="Color.Secondary" />
        }
    </MudChipSet>
</Centered>
<br/>
<br/>
<MudStack Spacing="3">
    @foreach (var business in Directory.Businesses.Select(b => Mappers.BusinessDtoToModel(b)))
    {
        <div style="display:@(!_selectedCategories.Any() || _selectedCategories.All(c => business.Categories.Contains(c)) ? "block" : "none");">
            <MudCard Outlined="true">
                <MudCardHeader><MudText Typo="Typo.h6">@business.Name</MudText></MudCardHeader>
                <MudCardContent>
                    <MudHidden Breakpoint="@BreakPoint">
                        <MudStack Spacing="6">
                            @if (business.Description.TryPickT0(out var description, out _))
                            {
                                <MudText><Centered>Description:</Centered><br/>@Print(description)</MudText>
                                <br/>
                            }
                            @if (business.ChiefExecutive.TryPickT0(out var executive, out _))
                            {
                                <MudText Align="Align.Center">Executive:<br />@Print(executive)</MudText>
                            }
                            @if (business.Address.TryPickT0(out var address, out _))
                            {
                                <MudText Align="Align.Center">Address:<br/>@Print(Print(address))</MudText>
                            }
                            @if (business.Phone.TryPickT0(out var phone, out _))
                            {
                                <MudText Align="Align.Center">Phone:<br/>@Print(Print(phone))</MudText>
                            }
                            @if (business.Website.TryPickT0(out var website, out _))
                            {
                                <MudText Align="Align.Center">Website:<br/>@UrlView(website)</MudText>
                            }
                            @if (business.Email.TryPickT0(out var email, out _))
                            {
                                <MudText Align="Align.Center">Email:<br/>@EmailView(email)</MudText>
                            }
                        </MudStack>
                    </MudHidden>
                    <MudHidden Breakpoint="@BreakPoint" Invert="true">
                        <MudTable Items="@GetRows(business).Where(row => row.PropertyValue.IsT0)" Hover="true" Breakpoint="Breakpoint.None" RowClass="no-borders">
                            <RowTemplate>
                                <MudTd Style="text-align:right; vertical-align:top; width:60px;"><MudText>@context.PropertyName</MudText></MudTd>
                                <MudTd>
                                    @if (context.PropertyValue.TryPickT0(out var propertyValue, out _))
                                    {
                                        switch (context.PropertyName)
                                        {
                                            case WebsiteColumnName:
                                                @if (context.Model.Website.TryPickT0(out var website, out _))
                                                {
                                                    <ExternalLink Href="@website.AbsoluteUri">@website.AbsoluteUri</ExternalLink>
                                                }

                                                break;

                                            case EmailColumnName:
                                                if (context.Model.Email.TryPickT0(out var emailValue, out _))
                                                {
                                                    <MudLink Href="@($"mailto:{emailValue}")">@emailValue</MudLink>
                                                }

                                                break;

                                            default:
                                                <MudText>@propertyValue</MudText>
                                                break;
                                        }
                                    }
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudHidden>
                </MudCardContent>
            </MudCard>
        </div>
    }
</MudStack>
@code{
    private const Breakpoint BreakPoint = Breakpoint.MdAndUp;
    private const string WebsiteColumnName = "Website:";
    private const string EmailColumnName = "Email:";

    private record RowViewModel(string PropertyName, OneOf<string, None> PropertyValue, Business Model);

    private IReadOnlyCollection<BusinessCategory> _selectedCategories = [];

    private RowViewModel[] GetRows(Business business) =>
    [
        new("Executive:", business.ChiefExecutive.MapT0(value => value), business),
        new("Description:", business.Description, business),
        new("Address:", Print(business.Address), business),
        new("Phone:", Print(business.Phone), business),
        new(WebsiteColumnName, Print(business.Website), business),
        new(EmailColumnName, Print(business.Email), business)
    ];

    private static OneOf<string, None> Print(OneOf<Address, None> address) => address.MapT0(a => a.Value);
    private static OneOf<string, None> Print(OneOf<Phone, None> phone) => phone.MapT0(a => a.Value);
    private static OneOf<string, None> Print(OneOf<Uri, None> website) => website.MapT0(a => a.AbsoluteUri);
    private static OneOf<string, None> Print(OneOf<Email, None> email) => email.MapT0(a => a.Value);
    private static string Print(OneOf<string, None> value) => value.Match(theValue => theValue, none => string.Empty);

    private RenderFragment UrlView(OneOf<Uri, None> url) => __builder =>
    {
        if (url.TryPickT0(out var urlValue, out _))
        {
            <ExternalLink Href="@urlValue.AbsoluteUri">@urlValue.AbsoluteUri</ExternalLink>
        }
        else
        {
            <MudText>Unknown</MudText>
        }
    };

    private RenderFragment EmailView(OneOf<Email, None> email) => __builder =>
    {
        if (email.TryPickT0(out var emailValue, out _))
        {
            <MudLink Href="@($"mailto:{emailValue}")">@emailValue</MudLink>
        }
        else
        {
            <MudText>Unknown</MudText>
        }
    };

    private static readonly (BusinessCategory Category, string Description)[] Categories =
    [
        (BusinessCategory.Black, "Black"),
        (BusinessCategory.ArtsCultureEntertainment, "Arts/Culture/Entertainment"),
        (BusinessCategory.BuildingAndConstruction, "Building & Construction")
    ];
}
