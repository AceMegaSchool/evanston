@page "/"
@using Evanston.Component
@using OneOf
@using OneOf.Types
@inject Directory Directory
@inject Mappers Mappers

<PageTitle>Black Businesses | Ace Mega School of Evanston</PageTitle>

<style>
    .no-borders > td, .no-borders > tr > th {
        border: none;
    }
</style>

<MudStack Spacing="3">
    @foreach (var business in Directory.Businesses.Select(b => Mappers.BusinessDtoToModel(b)))
    {
        <MudCard Outlined="true">
            <MudCardHeader><MudText Typo="Typo.h6">@business.Name</MudText></MudCardHeader>
            <MudCardContent>
                <MudHidden Breakpoint="@BreakPoint">
                    <MudStack Spacing="6">
                        <MudText><Centered>Description:</Centered><br/>@business.Description</MudText>
                        <br/>
                        <MudText Align="Align.Center">Address:<br/>@Print(business.Address)</MudText>
                        <MudText Align="Align.Center">Phone:<br />@Print(business.Phone)</MudText>
                        <MudText Align="Align.Center">Website:<br />@UrlView(business.Website)</MudText>
                        <MudText Align="Align.Center">Email:<br />@EmailView(business.Email)</MudText>
                    </MudStack>
                </MudHidden>
                <MudHidden Breakpoint="@BreakPoint" Invert="true">
                    <MudDataGrid Items="@GetRows(business)" HeaderClass="d-none" RowClass="no-borders" Breakpoint="Breakpoint.None">
                        <Columns>
                            <PropertyColumn Property="x => x.Property" CellStyle="text-align:right; vertical-align:top;"/>
                            <TemplateColumn>
                                <CellTemplate>
                                    @if (context.Item?.Property == WebsiteColumnName)
                                    {
                                        @UrlView(context.Item!.Model.Website)
                                    }
                                    else if (context.Item?.Property == EmailColumnName)
                                    {
                                        @EmailView(context.Item!.Model.Email)
                                    }
                                    else
                                    {
                                        <MudText>@context.Item?.PropertyValue</MudText>
                                    }
                                </CellTemplate> 
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudHidden>
            </MudCardContent>
        </MudCard>
    }
</MudStack>
@code{
    private const Breakpoint BreakPoint = Breakpoint.MdAndUp;
    private const string WebsiteColumnName = "Website:";
    private const string EmailColumnName = "Email:";

    private record RowViewModel(string Property, string PropertyValue, Business Model);

    private RowViewModel[] GetRows(Business business) =>
    [
        new("Description:", business.Description, business),
        new("Address:", Print(business.Address), business),
        new("Phone:", Print(business.Phone), business),
        new(WebsiteColumnName, Print(business.Website), business),
        new(EmailColumnName, Print(business.Email), business)
    ];

    private static string Print(OneOf<Address, None> address) => address.Match(a => a.Value, none => "Unknown");
    private static string Print(OneOf<Phone, None> phone) => phone.Match(a => a.Value, none => "Unknown");
    private static string Print(OneOf<Uri, None> website) => website.Match(a => a.AbsoluteUri, none => "Unknown");
    private static string Print(OneOf<Email, None> email) => email.Match(a => a.Value, none => "Unknown");

    private RenderFragment UrlView(OneOf<Uri, None> url) => __builder =>
    {
        if (url.TryPickT0(out var urlValue, out _))
        {
            <ExternalLink Href="@urlValue.AbsoluteUri">@urlValue.AbsoluteUri</ExternalLink>
        }
        else
        {
            <MudText>Unknown</MudText>
        }
    };

    private RenderFragment EmailView(OneOf<Email, None> email) => __builder =>
    {
        if (email.TryPickT0(out var emailValue, out _))
        {
            <MudLink Href="@($"mailto:{emailValue}")">@emailValue</MudLink>
        }
        else
        {
            <MudText>Unknown</MudText>
        }
    };
}
